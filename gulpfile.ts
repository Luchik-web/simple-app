////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LIBS AND MAIN OPTIONS DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Gulp core
const gulp = require('gulp');

// Gulp lib definitions
const fs = require('fs');
const sassInlineSvg = require('gulp-sass-inline-svg');
const svgmin = require('gulp-svgmin');
const replace = require('gulp-replace');

const NGAPP_NEW_SRC_DIR = './src';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TASKS DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Form base required data that created from src/assets or src/dev
const iconsTask = gulp.task('icons', gulp.series(buildIcons));

// export tasks
exports.icons = iconsTask;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TASK FUNCTIONS DEFINITIONS
// Core naming:
// * NgApp OLD  - old post login application folder
// * NgApp NEW  - new angular application folder
// * App DEST   - common build destination folder
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// PUBLIC DEFINITIONS //////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////// ICONS //////////////////////////////////////////////////////////////////////////////////////////////////////
// Icons build authomatically in the app. The result dependencies are:
// * ./src/app/core/config/icons-autogenerated.ts file
//   with the variable `const IconsListAutogenerated: IconsListAutogeneratedInterface`
//   and avaliable icons list
// * .src/dev/scss/icons/_sass-inline-svg.scss file
//   with svg icons stringified

/**
 * Build icons consist of two steps that should be executed one by one
 *
 * Steps:
 * 1. Builld TS file with autogenerated icons
 * 2. Form scss icons related files
 *
 * Icons build authomatically in the app. The result dependencies are:
 * - ./src/app/core/config/icons-autogenerated.ts file
 *   with the variable `const IconsListAutogenerated: IconsListAutogeneratedInterface`
 *   and avaliable icons list
 * - .src/dev/scss/icons/_sass-inline-svg.scss file
 *   with svg icons stringified
 * @public
 */
function buildIcons(done) {
    return gulp.series(
        _buildIconsStepBuildTs,
        _buildIconsStepFormScss,
        function (seriesDone) {
            seriesDone();
            done();
        }
    )();

    /**
     * Builld TS file with autogenerated icons
     * @param _nestedDone
     * @private
     */
    function _buildIconsStepBuildTs(nestedDone) {
        __info('Build Icons: builld TS file with autogenerated icons');

        let directories: Array<string>;
        let htmlContent: string = '';

        htmlContent += '/**';
        htmlContent += '\r\n * @packageDocumentation';
        htmlContent += '\r\n * @module CoreModule/config';
        htmlContent += '\r\n * @author luchik';
        htmlContent += '\r\n */';
        htmlContent += '\r\n/** This file is autogenerated with gulp. Use `gulp icons` to rebuild the file */';
        htmlContent += '\r\n';
        htmlContent += '\r\n/**';
        htmlContent += '\r\n * Icons interface';
        htmlContent += '\r\n */';
        htmlContent += '\r\nexport interface IconsListAutogeneratedInterface {';
        htmlContent += '\r\n    svgprefix: string;';
        htmlContent += '\r\n    dir: string;';
        htmlContent += '\r\n    svg: Array<string>;';
        htmlContent += '\r\n    png: Array<string>;';
        htmlContent += '\r\n    gif: Array<string>;';
        htmlContent += '\r\n}';
        htmlContent += '\r\n';

        // IconsListAutogenerated
        htmlContent += '\r\n/**';
        htmlContent += '\r\n * Base Autogenerated Icons from UI folder';
        htmlContent += '\r\n */';
        htmlContent += '\r\nexport const IconsListAutogenerated: IconsListAutogeneratedInterface = {';
        htmlContent += '\r\n    svgprefix: \'\',';
        htmlContent += __buildIconsListAutogenerated('/ui/icons', 0);
        htmlContent += '\r\n};';
        htmlContent += '\r\n';

        // IconsListAutogeneratedOther
        directories = _getDirectories(NGAPP_NEW_SRC_DIR + '/assets/images/ui/icons', '/');
        htmlContent += '\r\n/**';
        htmlContent += '\r\n * Additionall Autogenerated Icons';
        htmlContent += '\r\n */';
        htmlContent += '\r\n export const IconsListAutogeneratedOther: Array<IconsListAutogeneratedInterface> = [';
        directories.forEach((dirName: string) => {
            htmlContent += '\r\n    {';
            htmlContent += '\r\n        svgprefix: \'/' + dirName + '\',';
            htmlContent += __buildIconsListAutogenerated('/ui/icons/' + dirName + '/', 1);
            htmlContent += '\r\n    },';
        });
        htmlContent += '\r\n    {';
        htmlContent += '\r\n        svgprefix: \'/global/ui/logos\',';
        htmlContent += __buildIconsListAutogenerated('/ui/logos/', 1);
        htmlContent += '\r\n    },';
        htmlContent += '\r\n];';
        htmlContent += '\r\n';

        fs.writeFileSync('./src/app/core/config/icons-autogenerated.ts', htmlContent);
        nestedDone();
    }

    /**
     * Form scss icons related files
     * @param any _nestedDone
     * @returns any
     * @private
     */
    function _buildIconsStepFormScss(_nestedDone: any): any {
        __info('Build Icons: form scss icons related files');

        return gulp.src(NGAPP_NEW_SRC_DIR + '/assets/images/ui/icons/*.svg')
            .pipe(svgmin()) // Recommend using svg min to optimize svg files first
            .pipe(replace(/currentColor/g, '#{$fillcolor}'))
            .pipe(sassInlineSvg({
                destDir: NGAPP_NEW_SRC_DIR + '/dev/scss/icons'
            }))
            .pipe(gulp.src(NGAPP_NEW_SRC_DIR + '/dev/scss/icons/_sass-inline-svg.scss'))
            .pipe(replace('call($functionname', 'call(get-function($functionname)'))
            .pipe(gulp.dest(NGAPP_NEW_SRC_DIR + '/dev/scss/icons'));
    }

    /**
     * Fetch the lis
     * @public
     */
    function __buildIconsListAutogenerated(dirName: string, level: number = 1): any {
        const svglist: Array<string> = _getFilesByExtensions(NGAPP_NEW_SRC_DIR + '/assets/images' + dirName, ['svg'], '/');
        const pnglist: Array<string> = _getFilesByExtensions(NGAPP_NEW_SRC_DIR + '/assets/images' + dirName, ['png'], '/');
        const giflist: Array<string> = _getFilesByExtensions(NGAPP_NEW_SRC_DIR + '/assets/images' + dirName, ['gif'], '/');
        const prefix: string = '\r\n' + '    '.repeat(level + 1);
        let htmlContent: string = '';

        htmlContent += prefix + 'dir: \'' + dirName + '\',';
        htmlContent += prefix + 'svg: [';
        svglist.forEach((filename: string) => {
            htmlContent += prefix + '    \'' + filename + '\',';
        });
        htmlContent += prefix + '],';
        htmlContent += prefix + 'png: [';
        pnglist.forEach((filename: string) => {
            htmlContent += prefix + '    \'' + filename + '\',';
        });
        htmlContent += prefix + '],';
        htmlContent += prefix + 'gif: [';
        giflist.forEach((filename: string) => {
            htmlContent += prefix + '    \'' + filename + '\',';
        });
        htmlContent += prefix + '],';

        return htmlContent;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// PRIVATE DEFINITIONS /////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Get fonts from the directory
 * @private
 * @params {string} htmlContent Initial content text
 * @params {Array<RegExp>} regexps List of reg exp to search in text
 * @returns {Array<string>} array of patterns found
 */
function _getDirectories(baseFoldr: string, srcFolder: string) {
    let list = [];

    list = fs.readdirSync(baseFoldr + srcFolder).filter(filename => {
        return fs.lstatSync(baseFoldr + srcFolder + filename).isDirectory();
    });
    return list;
}

/**
 * Get fonts from the directory
 * @private
 * @params string srcFolder
 * @params Array<string> extensions
 * @params string arrayItemPrefix File will be created as [arrayItemPrefix] + [filename]
 * @returns Array<string> array of patterns found
 */
function _getFilesByExtensions(srcFolder: string, extensions: Array<string>, arrayItemPrefix: string = '') {
    const list: Array<string> = [];

    fs.readdirSync(srcFolder).forEach((filename: string) => {
        let extension;
        extension = filename.split('.').pop();

        if (extensions.indexOf(extension) > -1) {
            list.push(arrayItemPrefix + filename);
        }
    });
    return list;
}

/**
 * Logging
 */
function __info(...args: any[]) {
    // tslint:disable-next-line: no-console
    console.info.apply(console, args);
}
